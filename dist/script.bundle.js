/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Ball.ts":
/*!*********************!*\
  !*** ./src/Ball.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Board */ \"./src/Board.ts\");\n\r\nvar Ball = /** @class */ (function () {\r\n    function Ball(globalVars, board) {\r\n        // console.log(\"Ball created\");\r\n        this.gv = globalVars;\r\n        this._board = board;\r\n        this.selected = false;\r\n        this.color = this.gv.ballColors[Math.floor(Math.random() * this.gv.ballColors.length)];\r\n        this.generateBall();\r\n    }\r\n    /**\r\n     * Generates this ball's template\r\n     */\r\n    Ball.prototype.generateBall = function () {\r\n        // Create element\r\n        this.ball = document.createElement(\"div\");\r\n        this.ball.className = \"ball\";\r\n        this.ball.style.backgroundColor = this.color;\r\n        this.ball.setAttribute(\"color\", this.color);\r\n        // Assign id\r\n        this.ball.id = \"ball\" + this.gv.ballCount;\r\n        this.gv.ballCount++;\r\n    };\r\n    /**\r\n     * Add a ball to the desired destination\r\n     * @param destination \"main\" or \"incoming\"\r\n     */\r\n    Ball.prototype.addTo = function (destination) {\r\n        switch (destination) {\r\n            case \"main\":\r\n                // console.log(\"Appending ball to the gameboard\");\r\n                // Modify ball's properties\r\n                this.ball.addEventListener(\"click\", this.selectBall.bind(this));\r\n                this.ball.classList.remove(\"ball-preview\");\r\n                var fieldId = void 0;\r\n                do {\r\n                    this.x = Math.floor(Math.random() * this.gv.width);\r\n                    this.y = Math.floor(Math.random() * this.gv.height);\r\n                    fieldId = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId([this.y, this.x]);\r\n                } while (!_Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].checkIfFieldOccupied(fieldId));\r\n                var fieldToAddTo = document.getElementById(fieldId);\r\n                // console.log(\"Ball to table, coords: \", this.y, this.x);\r\n                fieldToAddTo.appendChild(this.ball);\r\n                this.gv.ballsOnBoard.push(this);\r\n                break;\r\n            case \"incoming\":\r\n                var incomingDiv = document.getElementById(\"incoming\");\r\n                this.ball.classList.add(\"ball-preview\");\r\n                incomingDiv.appendChild(this.ball);\r\n                break;\r\n            default:\r\n                console.log(\"Unknown destination: \" + destination);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Selects a ball.\r\n     * Adds/removes \"ball-selected\" class.\r\n     */\r\n    Ball.prototype.selectBall = function () {\r\n        // console.log(\"Ball selected\");\r\n        // console.log(`Balls can be selected: ${this.gv.ballsCanBeSelected}`);\r\n        if (this.gv.ballsCanBeSelected) {\r\n            // console.log(\"balls can be selected\")\r\n            // console.log(this.selected);\r\n            // console.log(this.gv.selectedBall);\r\n            // console.log(this.gv.ballsOnBoard);\r\n            if (!this.selected) {\r\n                // console.log(\"selecting ball\");\r\n                // Remove all selected classes\r\n                var a = this.gv.ballsOnBoard.filter(function (el) { return el.selected == true; });\r\n                if (a.length > 0) {\r\n                    a[0].ball.classList.remove(\"ball-selected\");\r\n                    a[0].selected = false;\r\n                    this._board.pathfinding2.clearColoring();\r\n                }\r\n                // Select ball\r\n                this.selected = true;\r\n                this.gv.selectedBall = [this.y, this.x];\r\n                this.ball.classList.add(\"ball-selected\");\r\n            }\r\n            else {\r\n                // console.log(\"Unselect ball\");\r\n                this.selected = false;\r\n                this.gv.selectedBall = undefined;\r\n                this.ball.classList.remove(\"ball-selected\");\r\n                this._board.pathfinding2.clearColoring();\r\n            }\r\n            // console.log(\"sel after: \", this.gv.ballsOnBoard, this.gv.selectedBall);\r\n        }\r\n    };\r\n    /**\r\n     * @param to destination's id\r\n     */\r\n    Ball.prototype.moveBall = function (to) {\r\n        var destinationField = document.getElementById(to);\r\n        var currParent = this.ball.parentNode;\r\n        currParent.removeChild(this.ball);\r\n        destinationField.appendChild(this.ball);\r\n    };\r\n    return Ball;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ball);\r\n\n\n//# sourceURL=webpack://webpack_win/./src/Ball.ts?");

/***/ }),

/***/ "./src/Board.ts":
/*!**********************!*\
  !*** ./src/Board.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Pathfinding2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Pathfinding2 */ \"./src/Pathfinding2.ts\");\n/* harmony import */ var _Ball__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Ball */ \"./src/Ball.ts\");\n\r\n\r\nvar Board = /** @class */ (function () {\r\n    function Board(globalVars, pathfindingClass) {\r\n        console.log(\"class Board created\");\r\n        this.gv = globalVars;\r\n        this.pathfinding = pathfindingClass;\r\n        this.pathfinding2 = new _Pathfinding2__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.gv);\r\n        this.gameBoard = document.getElementById(\"main\");\r\n        this.incoming = document.getElementById(\"incoming\");\r\n        this.gameTable = document.getElementById(\"gametable\");\r\n        this.preview = document.getElementById(\"preview\");\r\n        // console.log(this.gv);\r\n        this.incomingBalls = [];\r\n        this.gameBalls = [];\r\n    }\r\n    /**\r\n     * Generates the main table of divs,\r\n     * temporarily also the \"More button\"\r\n     */\r\n    Board.prototype.generate = function () {\r\n        var table = document.createElement(\"div\");\r\n        table.id = \"gameTable\";\r\n        for (var i = 0; i < this.gv.height; i++) {\r\n            var row = document.createElement(\"div\");\r\n            row.classList.add(\"row\");\r\n            for (var j = 0; j < this.gv.width; j++) {\r\n                var field = document.createElement(\"div\");\r\n                field.classList.add(\"field\");\r\n                field.id = i + \"-\" + j;\r\n                field.classList.add(\"flex-center\");\r\n                field.addEventListener(\"click\", this.clickTile.bind(this));\r\n                // field.innerText = \"0\";\r\n                // field.addEventListener(\"click\", this.setStartFinish.bind(this));\r\n                row.appendChild(field);\r\n            }\r\n            table.appendChild(row);\r\n        }\r\n        this.gv.main.appendChild(table);\r\n        // add balls btn - delete later\r\n        var a = document.createElement(\"button\");\r\n        a.addEventListener(\"click\", this.ballsToBoard.bind(this));\r\n        a.innerText = \"More\";\r\n        this.preview.appendChild(a);\r\n    };\r\n    ;\r\n    Board.prototype.clickTile = function (e) {\r\n        var target = e.target;\r\n        // console.log(target);\r\n        // console.log(\"clickTile\");\r\n        var id = target.id;\r\n        // Start pathfinding when an empty field is clicked\r\n        // console.log(target.parentNode.childElementCount);\r\n        // console.log(this.gv.width);\r\n        // console.log(this.gv.selectedBall);\r\n        if (this.gv.selectedBall != undefined) {\r\n            if (!this.gv.pathfindingDone) {\r\n                if (target.parentNode.childElementCount == this.gv.width) {\r\n                    // console.log(Board.idToArray(id));\r\n                    this.pathfinding2.setValues(Board.arrayToId(this.gv.selectedBall), id);\r\n                    this.pathfinding2.start();\r\n                    this.gv.pathfindingDone = true;\r\n                }\r\n            }\r\n            else {\r\n                if (target.childElementCount == 0) {\r\n                    if (target.parentNode.childElementCount == this.gv.width) {\r\n                        this.pathfinding2 = new _Pathfinding2__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.gv);\r\n                        this.pathfinding2.setValues(Board.arrayToId(this.gv.selectedBall), id);\r\n                        this.pathfinding2.start();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Function converting string div id to a table of coords\r\n     * @param id string id -> \"y-x\"\r\n     * @returns coords -> [y, x]\r\n     */\r\n    Board.idToArray = function (id) {\r\n        // console.log(\"conversion\", id);\r\n        var splitTable = id.split(\"-\");\r\n        var Y = parseInt(splitTable[0]);\r\n        var X = parseInt(splitTable[1]);\r\n        return [Y, X];\r\n    };\r\n    ;\r\n    /**\r\n     * Generates balls and places them in the incoming box;\r\n     * Those have no ability to be selected;\r\n     */\r\n    Board.prototype.generateIncoming = function () {\r\n        console.log(\"Generating incoming balls\");\r\n        for (var i = 0; i < this.gv.ballsPerRound; i++) {\r\n            var ball = new _Ball__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.gv, this);\r\n            this.incomingBalls.push(ball);\r\n            ball.addTo(\"incoming\");\r\n        }\r\n    };\r\n    /**\r\n     * Moves balls from incoming box to the gameboard\r\n     */\r\n    Board.prototype.ballsToBoard = function () {\r\n        console.log(\"Moving balls\");\r\n        for (var i = 0; i < this.gv.ballsPerRound; i++) {\r\n            // console.log(this.incomingBalls);\r\n            // Remove from incoming\r\n            var ball = this.incomingBalls.pop();\r\n            this.incoming.removeChild(ball.ball);\r\n            // Append to gameTable\r\n            ball.addTo(\"main\");\r\n        }\r\n        // console.log(this.incomingBalls);\r\n        this.generateIncoming();\r\n    };\r\n    /**\r\n     * Converts array of coords to string div id\r\n     * @param array [y, x]\r\n     * @returns id: \"y-x\"\r\n     */\r\n    Board.arrayToId = function (array) {\r\n        return array[0] + \"-\" + array[1];\r\n    };\r\n    ;\r\n    /**\r\n     * Checks if the desired ball's position is occupied\r\n     * @param fieldId string \"y-x\"\r\n     * @returns bool ifOccupied\r\n     */\r\n    Board.checkIfFieldOccupied = function (fieldId) {\r\n        var field = document.getElementById(fieldId);\r\n        if (field.childElementCount > 0) {\r\n            // Field has a ball in it\r\n            return false;\r\n        }\r\n        else {\r\n            // Field has no children - is free\r\n            return true;\r\n        }\r\n    };\r\n    return Board;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Board);\r\n\n\n//# sourceURL=webpack://webpack_win/./src/Board.ts?");

/***/ }),

/***/ "./src/GlobalVars.ts":
/*!***************************!*\
  !*** ./src/GlobalVars.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar GlobalVars = /** @class */ (function () {\r\n    function GlobalVars() {\r\n        // Game data\r\n        this.gameData = {};\r\n        this.height = 10;\r\n        this.width = 10;\r\n        this.wallAmount = 4;\r\n        this.sfClicked = 0; // start-finish-Clicked\r\n        this.area = this.height * this.width; // Total area of a map\r\n        this.ballColors = [\r\n            \"red\",\r\n            \"green\",\r\n            \"blue\",\r\n            \"orange\",\r\n            \"yellow\",\r\n            \"black\",\r\n        ];\r\n        this.incomingBalls = [];\r\n        this.ballsOnBoard = [];\r\n        this.ballsPerRound = 3;\r\n        this.ballCount = 0; // Amount of all balls in the game (incoming + on board)\r\n        this.ballsCanBeSelected = true; // Enables click event on every ball\r\n        this.selectedBall = undefined;\r\n        this.pathfindingDone = false;\r\n        this.colorStartFound = false;\r\n        // Colors\r\n        this.colorFind = true; // [R, G]\r\n        this.pathProjectionColor = \"purple\";\r\n        this.pathSelectionColor = \"grey\";\r\n        // Something\r\n        this.main = document.getElementById(\"main\");\r\n    }\r\n    return GlobalVars;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GlobalVars);\r\n\n\n//# sourceURL=webpack://webpack_win/./src/GlobalVars.ts?");

/***/ }),

/***/ "./src/Pathfinding.ts":
/*!****************************!*\
  !*** ./src/Pathfinding.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Board */ \"./src/Board.ts\");\n\r\nvar Pathfinding = /** @class */ (function () {\r\n    function Pathfinding(globalVars) {\r\n        console.log(\"class Pathfinding created\");\r\n        this.gv = globalVars;\r\n    }\r\n    Pathfinding.prototype.find = function (array, iteration) {\r\n        console.log(\"pathfinding start\");\r\n        console.log(\"given array\", array);\r\n        var newArray = [];\r\n        var endFound = false;\r\n        for (var i = 0; i < array.length; i++) {\r\n            var currField = array[i];\r\n            console.log(currField);\r\n            // Search above\r\n            if (currField[0] != 0) {\r\n                var a = document.getElementById(currField[0] - 1 + \"-\" + currField[1]);\r\n                console.log(\"top\", a.id);\r\n                if (a.innerText == \"M\") {\r\n                    endFound = true;\r\n                }\r\n                else if (a.innerText == (0).toString()) {\r\n                    a.innerText = iteration.toString();\r\n                    newArray[newArray.length] = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(a.id);\r\n                }\r\n            }\r\n            // Search below\r\n            if (currField[0] < this.gv.height - 1) {\r\n                var a = document.getElementById(currField[0] + 1 + \"-\" + currField[1]);\r\n                console.log(\"bot\", a);\r\n                if (a.innerText == \"M\") {\r\n                    endFound = true;\r\n                }\r\n                else if (a.innerText == (0).toString()) {\r\n                    a.innerText = iteration.toString();\r\n                    newArray[newArray.length] = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(a.id);\r\n                }\r\n            }\r\n            // Search left\r\n            if (currField[1] != 0) {\r\n                var a = document.getElementById(currField[0] + \"-\" + (currField[1] - 1));\r\n                console.log(\"left\", a);\r\n                if (a.innerText == \"M\") {\r\n                    endFound = true;\r\n                }\r\n                else if (a.innerText == (0).toString()) {\r\n                    a.innerText = iteration.toString();\r\n                    newArray[newArray.length] = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(a.id);\r\n                }\r\n            }\r\n            // Search below\r\n            if (currField[1] < this.gv.width - 1) {\r\n                var a = document.getElementById(currField[0] + \"-\" + (currField[1] + 1));\r\n                console.log(\"right\", a);\r\n                if (a.innerText == \"M\") {\r\n                    endFound = true;\r\n                }\r\n                else if (a.innerText == (0).toString()) {\r\n                    a.innerText = iteration.toString();\r\n                    newArray[newArray.length] = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(a.id);\r\n                }\r\n            }\r\n        }\r\n        iteration++;\r\n        console.log(newArray, iteration);\r\n        if (!endFound && newArray.length > 0) {\r\n            this.find(newArray, iteration);\r\n        }\r\n        else {\r\n            this.drawPath();\r\n        }\r\n    };\r\n    Pathfinding.prototype.drawPath = function () {\r\n        console.log(\"end found!\");\r\n        var a = document.getElementById(_Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId(this.gv.fCoords));\r\n        console.log(a);\r\n        this.findSiblingWithLowestNumber(this.gv.fCoords, []);\r\n        console.log(\"outside\");\r\n        // console.log(this.gv.finalPath);\r\n        var fp = this.gv.finalPath;\r\n        if (this.checkIfFinishAccessible()) {\r\n            for (var i = 0; i < fp.length; i++) {\r\n                document.getElementById(fp[i][0] + \"-\" + fp[i][1]).style.backgroundColor = \"red\";\r\n            }\r\n            document.getElementById(this.gv.sCoords[0] + \"-\" + this.gv.sCoords[1]).style.backgroundColor = \"red\";\r\n            document.getElementById(this.gv.fCoords[0] + \"-\" + this.gv.fCoords[1]).style.backgroundColor = \"red\";\r\n        }\r\n        else {\r\n            console.log(\"Nie dla psa\");\r\n        }\r\n    };\r\n    Pathfinding.prototype.checkIfFinishAccessible = function () {\r\n        var finishPosition = this.gv.fCoords;\r\n        var sidesAccessible = 4;\r\n        if (finishPosition[0] != 0) {\r\n            if (document.getElementById(finishPosition[0] - 1 + \"-\" + finishPosition[1]).innerHTML == \"X\") {\r\n                sidesAccessible--;\r\n            }\r\n        }\r\n        else {\r\n            sidesAccessible--;\r\n        }\r\n        if (finishPosition[0] < this.gv.width - 1) {\r\n            if (document.getElementById(finishPosition[0] + 1 + \"-\" + finishPosition[1]).innerHTML == \"X\") {\r\n                sidesAccessible--;\r\n            }\r\n        }\r\n        else {\r\n            sidesAccessible--;\r\n        }\r\n        if (finishPosition[1] != 0) {\r\n            if (document.getElementById(finishPosition[0] + \"-\" + (finishPosition[1] - 1)).innerHTML == \"X\") {\r\n                sidesAccessible--;\r\n            }\r\n        }\r\n        else {\r\n            sidesAccessible--;\r\n        }\r\n        if (finishPosition[1] < this.gv.height - 1) {\r\n            if (document.getElementById(finishPosition[0] + \"-\" + (finishPosition[1] + 1)).innerHTML == \"X\") {\r\n                sidesAccessible--;\r\n            }\r\n        }\r\n        else {\r\n            sidesAccessible--;\r\n        }\r\n        console.log(\"sides\");\r\n        console.log(sidesAccessible);\r\n        if (sidesAccessible != 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    Pathfinding.prototype.findSiblingWithLowestNumber = function (fieldId, path) {\r\n        var startFound = false;\r\n        var numberArray = [];\r\n        var positionArray = [];\r\n        // Search top\r\n        if (fieldId[0] != 0) {\r\n            var a = document.getElementById(fieldId[0] - 1 + \"-\" + fieldId[1]);\r\n            if (a.innerText != \"S\") {\r\n                if (a.innerText != \"0\") {\r\n                    if (a.innerText == \"X\" || a.innerText == \"M\") {\r\n                        numberArray.push(this.gv.area);\r\n                    }\r\n                    else {\r\n                        numberArray.push(parseInt(a.innerText));\r\n                    }\r\n                    positionArray[positionArray.length] = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(a.id);\r\n                }\r\n            }\r\n            else {\r\n                startFound = true;\r\n            }\r\n        }\r\n        // Search bot\r\n        if (fieldId[0] < this.gv.height - 1) {\r\n            var a = document.getElementById(fieldId[0] + 1 + \"-\" + fieldId[1]);\r\n            if (a.innerText != \"S\") {\r\n                if (a.innerText != \"0\") {\r\n                    if (a.innerText == \"X\" || a.innerText == \"M\") {\r\n                        numberArray.push(this.gv.area);\r\n                    }\r\n                    else {\r\n                        numberArray.push(parseInt(a.innerText));\r\n                    }\r\n                    positionArray[positionArray.length] = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(a.id);\r\n                }\r\n            }\r\n            else {\r\n                startFound = true;\r\n            }\r\n        }\r\n        // Search left\r\n        if (fieldId[1] != 0) {\r\n            var a = document.getElementById(fieldId[0] + \"-\" + (fieldId[1] - 1));\r\n            if (a.innerText != \"S\") {\r\n                if (a.innerText != \"0\") {\r\n                    if (a.innerText == \"X\" || a.innerText == \"M\") {\r\n                        numberArray.push(this.gv.area);\r\n                    }\r\n                    else {\r\n                        numberArray.push(parseInt(a.innerText));\r\n                    }\r\n                    positionArray[positionArray.length] = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(a.id);\r\n                }\r\n            }\r\n            else {\r\n                startFound = true;\r\n            }\r\n        }\r\n        // Search right\r\n        if (fieldId[1] < this.gv.width - 1) {\r\n            var a = document.getElementById(fieldId[0] + \"-\" + (fieldId[1] + 1));\r\n            if (a.innerText != \"S\") {\r\n                if (a.innerText != \"0\") {\r\n                    if (a.innerText == \"X\" || a.innerText == \"M\") {\r\n                        numberArray.push(this.gv.area);\r\n                    }\r\n                    else {\r\n                        numberArray.push(parseInt(a.innerText));\r\n                    }\r\n                    positionArray[positionArray.length] = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(a.id);\r\n                }\r\n            }\r\n            else {\r\n                startFound = true;\r\n            }\r\n        }\r\n        console.log(\"results:\");\r\n        console.log(numberArray);\r\n        console.log(positionArray);\r\n        console.log(Math.min.apply(Math, numberArray));\r\n        var s = Math.min.apply(Math, numberArray);\r\n        var index = numberArray.indexOf(s);\r\n        // console.log(index);\r\n        var fieldWithLowestNumber = positionArray[index];\r\n        console.log(\"path:\");\r\n        console.log(path);\r\n        console.log(startFound);\r\n        if (!startFound) {\r\n            path[path.length] = fieldWithLowestNumber;\r\n            console.log(\"next step\");\r\n            console.log(fieldWithLowestNumber, path);\r\n            this.findSiblingWithLowestNumber(fieldWithLowestNumber, path);\r\n        }\r\n        else {\r\n            console.log(\"Koniecccccccccc\");\r\n            console.log(path);\r\n            this.gv.finalPath = path;\r\n            console.log(\"inside:\");\r\n            console.log(this.gv.finalPath);\r\n        }\r\n    };\r\n    return Pathfinding;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Pathfinding);\r\n\n\n//# sourceURL=webpack://webpack_win/./src/Pathfinding.ts?");

/***/ }),

/***/ "./src/Pathfinding2.ts":
/*!*****************************!*\
  !*** ./src/Pathfinding2.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Board */ \"./src/Board.ts\");\n\r\n/**\r\n * Directions: top, bottom, left, right (no diagonal fields)\r\n *\r\n * Get the starting node's id (Board.idToArray(ball's position))\r\n * Get the end node's position (id of a field cursor's hovering on)\r\n * Operations on a pair of coordinates -> [y, x]\r\n * Then it's translated to the correct divs (path coloring)\r\n *      Either this is coloring divs or the 2d array of [y, x] coords is returned\r\n *      and the Board class colors suitable fields\r\n *\r\n * Methods:\r\n * getOpenLowestF => gets a node with the lowest F cost from the OPEN table\r\n * checkIfEndNode => checks, if current node is the end one\r\n * getneighbours => gets all neighbours {INode} of the current node\r\n *\r\n*/\r\nvar Pathfinding2 = /** @class */ (function () {\r\n    function Pathfinding2(globalVars) {\r\n        console.log(\"class Pathfinding2 - A* created\");\r\n        this.gv = globalVars;\r\n        this.gv.colorStartFound = false;\r\n        this.startNode, this.endNode;\r\n        this.open = [];\r\n        this.closed = [];\r\n        this.iterations = 4;\r\n        this.currIterations = 0;\r\n        this.isFound = false;\r\n        this.colorFind = this.gv.colorFind;\r\n    }\r\n    /**\r\n     * Sets the initial values of the whole pathfinding\r\n     * @param startId\r\n     * @param endId\r\n     */\r\n    Pathfinding2.prototype.setValues = function (startId, endId) {\r\n        console.log(\"setting values\");\r\n        this.startCoords = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(startId);\r\n        this.endCoords = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(endId);\r\n        this.startNode = this.createNode(startId);\r\n        this.endNode = this.createNode(endId);\r\n        this.clearColoring();\r\n        this.prepareStart();\r\n    };\r\n    /**\r\n     * Sets starting elements\r\n     */\r\n    Pathfinding2.prototype.prepareStart = function () {\r\n        // set starting node as the current one\r\n        var node = {\r\n            y: this.startCoords[0],\r\n            x: this.startCoords[1],\r\n            stringId: _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId(this.startCoords),\r\n            field: document.getElementById(_Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId(this.startCoords)),\r\n            g: 0,\r\n            h: 0,\r\n            f: 0,\r\n            isBall: true,\r\n            parent: undefined,\r\n        };\r\n        this.open.push(node);\r\n    };\r\n    /**\r\n     * Main body of the A* pathfinding algorithm\r\n     */\r\n    Pathfinding2.prototype.start = function () {\r\n        console.log(\"Start of the pathfinding algorithm\");\r\n        console.log(this);\r\n        // console.clear();\r\n        // 1) loop\r\n        while (!this.isFound) {\r\n            // this.interval = setInterval(function () {\r\n            // if (this.currIterations < this.iterations) {\r\n            // 2) current - node in OPEN with the lowest f_cost\r\n            this.current = this.getOpenLowestF();\r\n            // If there is a path to the end node\r\n            if (this.current != undefined) {\r\n                // console.log(this.current.field);\r\n                // console.log(this.current.f);\r\n                // console.log(\"1)\", this.current);\r\n                if (this.colorFind)\r\n                    this.current.field.style.backgroundColor = \"red\";\r\n                var index = this.open.indexOf(this.current);\r\n                // console.log(\"2.5)\", index);\r\n                // 3) + 4) Remove current from OPEN and add to CLOSED\r\n                // console.log(this.open, this.closed);\r\n                var node = this.open.splice(index, 1);\r\n                this.closed.push(node[0]);\r\n                // console.log(this.open, this.closed);\r\n                // 5) If current is the target node\r\n                if (this.current.y == this.endNode.y && this.current.x == this.endNode.x) {\r\n                    console.log(\"End node found\");\r\n                    this.isFound = true;\r\n                    // 6) return -> color the path (how to know which one?? -> parents??)\r\n                    // break;\r\n                    clearInterval(this.interval);\r\n                    // Mark end node found\r\n                    if (this.colorFind)\r\n                        this.current.field.style.backgroundColor = \"orange\";\r\n                    this.goBack(this.current);\r\n                }\r\n                this.neighbours = this.getNeighbours();\r\n                // 7) foreach neighbour of the current node\r\n                for (var i = 0; i < this.neighbours.length; i++) {\r\n                    var neighbour = this.neighbours[i];\r\n                    var cIncludes = this.including(this.closed, neighbour);\r\n                    // console.log(\"7) CLOSED includes: \", cIncludes);\r\n                    // 8) if neighbour is not traversable or neighbour is in CLOSED\r\n                    if (neighbour.isBall) {\r\n                        // 9) skip to the next neighbour\r\n                        // console.log(\"Balls!\");\r\n                        continue;\r\n                    }\r\n                    else if (cIncludes) {\r\n                        // console.log(\"Next!\");\r\n                        continue;\r\n                    }\r\n                    var oIncludes = this.including(this.open, neighbour);\r\n                    // 10) if new path to neighbour is shorter OR neighbour is not in OPEN\r\n                    if (!oIncludes) {\r\n                        // 11) set F cost of neighbour\r\n                        neighbour.f = Pathfinding2.getFCost(neighbour.g, neighbour.h);\r\n                        // 12) set parent of neighbour to current\r\n                        neighbour.parent = [this.current.y, this.current.x];\r\n                        // 13) if neighbour is not in OPEN\r\n                        if (!oIncludes) {\r\n                            // 14) add neighbour to OPEN\r\n                            this.open.push(neighbour);\r\n                            if (this.colorFind)\r\n                                neighbour.field.style.backgroundColor = \"green\";\r\n                        }\r\n                    }\r\n                    this.currIterations++;\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"koniec szmaciuro\");\r\n                this.goBack(this.findLowestF(this.closed));\r\n                break;\r\n            }\r\n            // }.bind(this), 500);\r\n        } // while brace\r\n    };\r\n    /**\r\n     * checks if CLOSED list includes specified element (y, x comparison)\r\n     * @param motherList the list to check if has the el\r\n     * @param el node to esarch for in the closed list\r\n     */\r\n    Pathfinding2.prototype.including = function (motherList, neighbour) {\r\n        var foundList = motherList.filter(function (el) { return el.x == neighbour.x && el.y == neighbour.y; });\r\n        var found = false;\r\n        if (foundList.length > 0) {\r\n            found = true;\r\n        }\r\n        // console.log(\"found: \", foundList, foundList.length);\r\n        return found;\r\n    };\r\n    /**\r\n     * Finds a node with the lowest F cost in the OPEN array\r\n     * @returns node {INode}\r\n     */\r\n    Pathfinding2.prototype.getOpenLowestF = function () {\r\n        // console.log(\"open: \", this.open);\r\n        var nodeWithLowestF = this.open[0];\r\n        for (var i = 0; i < this.open.length; i++) {\r\n            if (this.open[i].f < nodeWithLowestF.f) {\r\n                nodeWithLowestF = this.open[i];\r\n            }\r\n        }\r\n        // console.log(nodeWithLowestF);\r\n        return nodeWithLowestF;\r\n    };\r\n    /**\r\n     * Calculates the F cost in a node\r\n     * @param G cost\r\n     * @param H cost\r\n     * @returns G cost + H cost\r\n     */\r\n    Pathfinding2.getFCost = function (G, H) {\r\n        return G + H;\r\n    };\r\n    /**\r\n     * Calculates the distance from start node to the current node\r\n     * @param startNode start node's coords [y, x]\r\n     * @param current current node [y, x]\r\n     * @returns G cost\r\n     */\r\n    Pathfinding2.getGCost = function (startNode, current) {\r\n        var a = Math.abs(current[0] - startNode[0]);\r\n        var b = Math.abs(current[1] - startNode[1]);\r\n        var c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\r\n        // console.log(a, b, c);\r\n        return c;\r\n        // Formula to test c in the console\r\n        // let x:number = Math.sqrt(Math.pow(Math.abs(0 - 2) + 1, 2) + Math.pow(Math.abs(0 - 3) + 1, 2))\r\n    };\r\n    /**\r\n     * Calculates the distance from end node to the current node\r\n     * @param endNode -> end node's coords [y, x]\r\n     * @param current -> current node [y, x]\r\n     * @returns number -> H cost\r\n     */\r\n    Pathfinding2.getHCost = function (endNode, current) {\r\n        var a = Math.abs(current[0] - endNode[0]);\r\n        var b = Math.abs(current[1] - endNode[1]);\r\n        var c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\r\n        return c;\r\n    };\r\n    /**\r\n     * Gets all node's neighbours (top, bottom, left, right)\r\n     * @returns an :INode list of neighbours\r\n     */\r\n    Pathfinding2.prototype.getNeighbours = function () {\r\n        // .[next, previous]Sibling returns null if there's not one\r\n        var sides = [\"top\", \"bottom\", \"left\", \"right\"];\r\n        var neighbours = [];\r\n        for (var i = 0; i < sides.length; i++) {\r\n            switch (sides[i]) {\r\n                case \"top\":\r\n                    // There can be a node above\r\n                    if (this.current.y - 1 >= 0) {\r\n                        var idAbove = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId([this.current.y - 1, this.current.x]);\r\n                        neighbours.push(this.createNode(idAbove));\r\n                    }\r\n                    break;\r\n                case \"bottom\":\r\n                    // if y parameter + 1< board height\r\n                    if (this.current.y + 1 < this.gv.height) {\r\n                        var idBelow = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId([this.current.y + 1, this.current.x]);\r\n                        neighbours.push(this.createNode(idBelow));\r\n                    }\r\n                    break;\r\n                case \"left\":\r\n                    // previousSibling returns null if there's no such entity\r\n                    if (this.current.field.previousSibling != null) {\r\n                        var idLeft = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId([this.current.y, this.current.x - 1]);\r\n                        neighbours.push(this.createNode(idLeft));\r\n                    }\r\n                    break;\r\n                case \"right\":\r\n                    if (this.current.field.nextSibling != null) {\r\n                        var idRight = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId([this.current.y, this.current.x + 1]);\r\n                        neighbours.push(this.createNode(idRight));\r\n                    }\r\n                    break;\r\n                default:\r\n                    console.log(\"I have no idea what am I doing\");\r\n                    break;\r\n            }\r\n        }\r\n        return neighbours;\r\n    };\r\n    /**\r\n     * Creates a node\r\n     * @param id \"y-x\"\r\n     * @returns node object\r\n     */\r\n    Pathfinding2.prototype.createNode = function (id) {\r\n        var coordsArray = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].idToArray(id);\r\n        // Check if has a ball inside\r\n        // console.log(id);\r\n        var div = document.getElementById(id);\r\n        var ballInside = false;\r\n        if (div.childElementCount > 0) {\r\n            ballInside = true;\r\n        }\r\n        var node = {\r\n            y: coordsArray[0],\r\n            x: coordsArray[1],\r\n            stringId: id,\r\n            field: div,\r\n            f: undefined,\r\n            g: Pathfinding2.getGCost(this.startCoords, coordsArray),\r\n            h: Pathfinding2.getHCost(this.endCoords, coordsArray),\r\n            isBall: ballInside,\r\n            parent: undefined,\r\n        };\r\n        return node;\r\n    };\r\n    /**\r\n     * Clears previous' pathfinding algoirthm coloring\r\n     */\r\n    Pathfinding2.prototype.clearColoring = function () {\r\n        if (this.colorFind) {\r\n            for (var y = 0; y < this.gv.height; y++) {\r\n                for (var x = 0; x < this.gv.width; x++) {\r\n                    var div = document.getElementById(_Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId([y, x]));\r\n                    div.style.backgroundColor = \"\";\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Finds node with the lowest F cost in the passed array\r\n     * @param list target list of objects\r\n     * @returns a whole node\r\n     */\r\n    Pathfinding2.prototype.findLowestF = function (list) {\r\n        var result;\r\n        var lowest = Number.POSITIVE_INFINITY;\r\n        var tmp;\r\n        for (var i = 0; i < list.length; i++) {\r\n            tmp = list[i].f;\r\n            if (tmp < lowest) {\r\n                tmp = lowest;\r\n                result = list[i];\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Colors the found path from the end to start\r\n     * @param endNode End node\r\n     */\r\n    Pathfinding2.prototype.goBack = function (endNode) {\r\n        // console.clear();\r\n        console.log(endNode, endNode.parent);\r\n        endNode.field.style.backgroundColor = this.gv.pathProjectionColor;\r\n        var parentId = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId(endNode.parent);\r\n        var node2 = this.closed.find(function (el) { return el.stringId == parentId; });\r\n        var parentEl = document.getElementById(parentId);\r\n        console.log(\"closed\", this.closed);\r\n        do {\r\n            parentEl.style.backgroundColor = this.gv.pathProjectionColor;\r\n            if (node2.parent != undefined) {\r\n                parentId = _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].arrayToId(node2.parent);\r\n                node2 = this.closed.find(function (el) { return el.stringId == parentId; });\r\n                parentEl = document.getElementById(parentId);\r\n                console.log(this.gv.colorStartFound, node2, node2.parent);\r\n            }\r\n            else {\r\n                this.gv.colorStartFound = true;\r\n            }\r\n        } while (!this.gv.colorStartFound);\r\n    };\r\n    return Pathfinding2;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Pathfinding2);\r\n\n\n//# sourceURL=webpack://webpack_win/./src/Pathfinding2.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Board */ \"./src/Board.ts\");\n/* harmony import */ var _Pathfinding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Pathfinding */ \"./src/Pathfinding.ts\");\n/* harmony import */ var _GlobalVars__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GlobalVars */ \"./src/GlobalVars.ts\");\n\r\n\r\n\r\nvar Main = /** @class */ (function () {\r\n    function Main(globalVars) {\r\n        this.gameData = {};\r\n        console.log(\"class Main created\");\r\n        this._pathfinding = new _Pathfinding__WEBPACK_IMPORTED_MODULE_1__[\"default\"](globalVars);\r\n        this._board = new _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"](globalVars, this._pathfinding);\r\n        this.gv = globalVars;\r\n    }\r\n    Main.prototype.setIncoming = function () {\r\n        for (var i = 0; i < this.gv.ballsPerRound; i++) {\r\n            // let ball:Ball = new Ball(this.gv, );\r\n        }\r\n    };\r\n    Main.prototype.main = function () {\r\n        // console.log(this._board);\r\n        // console.log(this._pathfinding);\r\n        this._board.generate();\r\n        this._board.generateIncoming();\r\n        this._board.ballsToBoard();\r\n        // this._board.setWalls();\r\n    };\r\n    return Main;\r\n}());\r\n;\r\nnew Main(new _GlobalVars__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()).main();\r\n\n\n//# sourceURL=webpack://webpack_win/./src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;